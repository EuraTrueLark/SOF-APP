name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_DB: sof_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r services/requirements.txt
          pip install -r services/requirements-dev.txt

      - name: Install Node.js dependencies
        run: |
          cd frontend
          npm ci

      - name: Run Python linting
        run: |
          # Black code formatting check
          black --check services/
          # Flake8 linting
          flake8 services/
          # mypy type checking
          mypy services/

      - name: Run TypeScript linting
        run: |
          cd frontend
          npm run lint
          npm run type-check

      - name: Run Python unit tests
        env:
          DATABASE_URL: postgresql://postgres:test@localhost:5432/sof_test
          REDIS_URL: redis://localhost:6379
        run: |
          cd services
          pytest --cov=. --cov-report=xml --cov-report=term-missing

      - name: Run JavaScript unit tests
        run: |
          cd frontend
          npm run test:unit -- --coverage

      - name: PDF regression testing
        run: |
          cd services
          pytest tests/test_pdf_generation.py::test_pdf_pixel_diff -v

      - name: Build frontend
        run: |
          cd frontend
          npm run build

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          files: ./services/coverage.xml,./frontend/coverage/lcov.info

  e2e-tests:
    runs-on: ubuntu-latest
    needs: lint-and-test
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Start services with Docker Compose
        run: |
          docker-compose -f docker-compose.test.yml up -d
          
      - name: Wait for services
        run: |
          timeout 60s bash -c 'until curl -f http://localhost:8000/health; do sleep 5; done'

      - name: Set up Node.js for Cypress
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Cypress dependencies
        run: |
          cd frontend
          npm ci

      - name: Run Cypress E2E tests
        run: |
          cd frontend
          npm run cypress:run
        env:
          CYPRESS_BASE_URL: http://localhost:3000
          CYPRESS_API_BASE_URL: http://localhost:8000

      - name: Upload Cypress screenshots
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: cypress-screenshots
          path: frontend/cypress/screenshots

      - name: Upload Cypress videos
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: cypress-videos
          path: frontend/cypress/videos

      - name: Cleanup services
        if: always()
        run: docker-compose -f docker-compose.test.yml down

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Python security scan with Safety
        run: |
          pip install safety
          safety check -r services/requirements.txt

      - name: Node.js security scan
        run: |
          cd frontend
          npm audit --audit-level high

  build-and-push:
    runs-on: ubuntu-latest
    needs: [lint-and-test, security-scan]
    if: github.ref == 'refs/heads/main'
    
    strategy:
      matrix:
        service: [api-gateway, sof-service, auth-service, file-service, audit-service, frontend]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./${{ matrix.service }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Configure GCP credentials
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Terraform init
        run: |
          cd infra/environments/staging
          terraform init

      - name: Terraform plan
        run: |
          cd infra/environments/staging
          terraform plan -var="image_tag=${{ github.sha }}"

      - name: Terraform apply
        if: github.event_name == 'push'
        run: |
          cd infra/environments/staging
          terraform apply -auto-approve -var="image_tag=${{ github.sha }}"

      - name: Run smoke tests
        run: |
          # Wait for deployment
          sleep 60
          # Run basic health checks
          curl -f ${{ secrets.STAGING_API_URL }}/health
          
      - name: Run performance tests
        run: |
          # Install k6
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6
          
          # Run k6 performance tests
          k6 run -e BASE_URL=${{ secrets.STAGING_API_URL }} tests/performance/basic_load.js

  deploy-production:
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Configure GCP credentials
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Terraform init
        run: |
          cd infra/environments/production
          terraform init

      - name: Terraform plan
        run: |
          cd infra/environments/production
          terraform plan -var="image_tag=${{ github.sha }}"

      - name: Deploy with blue-green strategy
        run: |
          cd infra/environments/production
          terraform apply -auto-approve -var="image_tag=${{ github.sha }}" -var="deployment_strategy=blue-green"

      - name: Health check and rollback capability
        run: |
          # Comprehensive health checks
          ./scripts/health_check.sh ${{ secrets.PRODUCTION_API_URL }}
          
          # If health checks fail, rollback
          if [ $? -ne 0 ]; then
            echo "Health checks failed, initiating rollback"
            cd infra/environments/production
            terraform apply -auto-approve -var="rollback=true"
            exit 1
          fi
