version: '3.8'

services:
  # Database
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: sof_development
      POSTGRES_USER: sof_user
      POSTGRES_PASSWORD: sof_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./services/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sof_user -d sof_development"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # MinIO for S3-compatible storage
  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: sof_admin
      MINIO_ROOT_PASSWORD: sof_password_123
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # API Gateway
  api-gateway:
    build:
      context: ./services
      dockerfile: api-gateway/Dockerfile
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://sof_user:sof_password@postgres:5432/sof_development
      - REDIS_URL=redis://redis:6379
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=sof_admin  
      - MINIO_SECRET_KEY=sof_password_123
      - JWT_SECRET_KEY=your-secret-key-change-in-production
      - ENVIRONMENT=development
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    volumes:
      - ./services:/app
    restart: unless-stopped

  # SOF Service
  sof-service:
    build:
      context: ./services
      dockerfile: sof-service/Dockerfile
    ports:
      - "8001:8001"
    environment:
      - DATABASE_URL=postgresql://sof_user:sof_password@postgres:5432/sof_development
      - REDIS_URL=redis://redis:6379
      - ENVIRONMENT=development
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./services:/app
    restart: unless-stopped

  # Auth Service
  auth-service:
    build:
      context: ./services
      dockerfile: auth-service/Dockerfile
    ports:
      - "8002:8002"
    environment:
      - DATABASE_URL=postgresql://sof_user:sof_password@postgres:5432/sof_development
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET_KEY=your-secret-key-change-in-production
      - ENVIRONMENT=development
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./services:/app
    restart: unless-stopped

  # File Service
  file-service:
    build:
      context: ./services
      dockerfile: file-service/Dockerfile
    ports:
      - "8003:8003"
    environment:
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=sof_admin
      - MINIO_SECRET_KEY=sof_password_123
      - ENVIRONMENT=development
    depends_on:
      minio:
        condition: service_healthy
    volumes:
      - ./services:/app
    restart: unless-stopped

  # Audit Service
  audit-service:
    build:
      context: ./services
      dockerfile: audit-service/Dockerfile
    ports:
      - "8004:8004"
    environment:
      - DATABASE_URL=postgresql://sof_user:sof_password@postgres:5732/sof_development
      - ENVIRONMENT=development
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./services:/app
    restart: unless-stopped

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_BASE_URL=http://localhost:8000
      - NEXT_PUBLIC_ENVIRONMENT=development
      - NODE_ENV=development
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    restart: unless-stopped
    depends_on:
      - api-gateway

volumes:
  postgres_data:
  redis_data:
  minio_data:
